{"@timestamp":"2025-08-10T22:08:30.267722-03:00","logger_name":"org.hibernate.validator.internal.util.Version","message":"HV000001: Hibernate Validator 8.0.2.Final"}
{"@timestamp":"2025-08-10T22:08:30.30124-03:00","logger_name":"com.deliverytech.delivery.DeliveryApiApplication","message":"Starting DeliveryApiApplication using Java 21.0.7 with PID 17893 (/Users/robson/Documents/delivery-api-robson/delivery-api/target/classes started by robson in /Users/robson/Documents/delivery-api-robson/delivery-api)"}
{"@timestamp":"2025-08-10T22:08:30.301835-03:00","logger_name":"com.deliverytech.delivery.DeliveryApiApplication","message":"Running with Spring Boot v3.5.4, Spring v6.2.9"}
{"@timestamp":"2025-08-10T22:08:30.302327-03:00","logger_name":"com.deliverytech.delivery.DeliveryApiApplication","message":"No active profile set, falling back to 1 default profile: \"default\""}
{"@timestamp":"2025-08-10T22:08:30.334269-03:00","logger_name":"org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor","message":"Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable"}
{"@timestamp":"2025-08-10T22:08:30.334472-03:00","logger_name":"org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor","message":"For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'"}
{"@timestamp":"2025-08-10T22:08:31.286726-03:00","logger_name":"org.springframework.data.repository.config.RepositoryConfigurationDelegate","message":"Multiple Spring Data modules found, entering strict repository configuration mode"}
{"@timestamp":"2025-08-10T22:08:31.288208-03:00","logger_name":"org.springframework.data.repository.config.RepositoryConfigurationDelegate","message":"Bootstrapping Spring Data JPA repositories in DEFAULT mode."}
{"@timestamp":"2025-08-10T22:08:31.427857-03:00","logger_name":"org.springframework.data.repository.config.RepositoryConfigurationDelegate","message":"Finished Spring Data repository scanning in 132 ms. Found 5 JPA repository interfaces."}
{"@timestamp":"2025-08-10T22:08:31.441018-03:00","logger_name":"org.springframework.data.repository.config.RepositoryConfigurationDelegate","message":"Multiple Spring Data modules found, entering strict repository configuration mode"}
{"@timestamp":"2025-08-10T22:08:31.441902-03:00","logger_name":"org.springframework.data.repository.config.RepositoryConfigurationDelegate","message":"Bootstrapping Spring Data Redis repositories in DEFAULT mode."}
{"@timestamp":"2025-08-10T22:08:31.45795-03:00","logger_name":"org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport","message":"Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.deliverytech.delivery.repository.ClienteRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository"}
{"@timestamp":"2025-08-10T22:08:31.458249-03:00","logger_name":"org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport","message":"Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.deliverytech.delivery.repository.PedidoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository"}
{"@timestamp":"2025-08-10T22:08:31.458424-03:00","logger_name":"org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport","message":"Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.deliverytech.delivery.repository.ProdutoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository"}
{"@timestamp":"2025-08-10T22:08:31.458605-03:00","logger_name":"org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport","message":"Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.deliverytech.delivery.repository.RestauranteRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository"}
{"@timestamp":"2025-08-10T22:08:31.459187-03:00","logger_name":"org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport","message":"Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.deliverytech.delivery.repository.UsuarioRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository"}
{"@timestamp":"2025-08-10T22:08:31.459296-03:00","logger_name":"org.springframework.data.repository.config.RepositoryConfigurationDelegate","message":"Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces."}
{"@timestamp":"2025-08-10T22:08:31.899201-03:00","logger_name":"org.springframework.boot.web.embedded.tomcat.TomcatWebServer","message":"Tomcat initialized with port 8080 (http)"}
{"@timestamp":"2025-08-10T22:08:31.911116-03:00","logger_name":"org.apache.coyote.http11.Http11NioProtocol","message":"Initializing ProtocolHandler [\"http-nio-8080\"]"}
{"@timestamp":"2025-08-10T22:08:31.912306-03:00","logger_name":"org.apache.catalina.core.StandardService","message":"Starting service [Tomcat]"}
{"@timestamp":"2025-08-10T22:08:31.912455-03:00","logger_name":"org.apache.catalina.core.StandardEngine","message":"Starting Servlet engine: [Apache Tomcat/10.1.43]"}
{"@timestamp":"2025-08-10T22:08:31.940521-03:00","logger_name":"org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]","message":"Initializing Spring embedded WebApplicationContext"}
{"@timestamp":"2025-08-10T22:08:31.940782-03:00","logger_name":"org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext","message":"Root WebApplicationContext: initialization completed in 1606 ms"}
{"@timestamp":"2025-08-10T22:08:32.062496-03:00","logger_name":"com.zaxxer.hikari.HikariDataSource","message":"HikariPool-1 - Starting..."}
{"@timestamp":"2025-08-10T22:08:32.178574-03:00","logger_name":"com.zaxxer.hikari.pool.HikariPool","message":"HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:deliverydb user=SA"}
{"@timestamp":"2025-08-10T22:08:32.179541-03:00","logger_name":"com.zaxxer.hikari.HikariDataSource","message":"HikariPool-1 - Start completed."}
{"@timestamp":"2025-08-10T22:08:32.250286-03:00","logger_name":"org.hibernate.jpa.internal.util.LogHelper","message":"HHH000204: Processing PersistenceUnitInfo [name: default]"}
{"@timestamp":"2025-08-10T22:08:32.29318-03:00","logger_name":"org.hibernate.Version","message":"HHH000412: Hibernate ORM core version 6.2.6.Final"}
{"@timestamp":"2025-08-10T22:08:32.2949-03:00","logger_name":"org.hibernate.cfg.Environment","message":"HHH000406: Using bytecode reflection optimizer"}
{"@timestamp":"2025-08-10T22:08:32.379491-03:00","logger_name":"org.hibernate.bytecode.internal.BytecodeProviderInitiator","message":"HHH000021: Bytecode provider name : bytebuddy"}
{"@timestamp":"2025-08-10T22:08:32.458469-03:00","logger_name":"org.springframework.orm.jpa.persistenceunit.SpringPersistenceUnitInfo","message":"No LoadTimeWeaver setup: ignoring JPA class transformer"}
{"@timestamp":"2025-08-10T22:08:32.64165-03:00","logger_name":"org.hibernate.bytecode.internal.BytecodeProviderInitiator","message":"HHH000021: Bytecode provider name : bytebuddy"}
{"@timestamp":"2025-08-10T22:08:33.154163-03:00","logger_name":"org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator","message":"HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]"}
{"@timestamp":"2025-08-10T22:08:33.165808-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists cliente cascade "}
{"@timestamp":"2025-08-10T22:08:33.167477-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists item_pedido cascade "}
{"@timestamp":"2025-08-10T22:08:33.168063-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists pedido cascade "}
{"@timestamp":"2025-08-10T22:08:33.168552-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists produto cascade "}
{"@timestamp":"2025-08-10T22:08:33.168971-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists restaurante cascade "}
{"@timestamp":"2025-08-10T22:08:33.16943-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists usuarios cascade "}
{"@timestamp":"2025-08-10T22:08:33.173801-03:00","logger_name":"org.hibernate.SQL","message":"\n    create table cliente (\n        ativo boolean not null,\n        data_criacao timestamp(6),\n        id bigint generated by default as identity,\n        usuario_id bigint,\n        email varchar(255),\n        endereco varchar(255),\n        nome varchar(255),\n        telefone varchar(255),\n        primary key (id)\n    )"}
{"@timestamp":"2025-08-10T22:08:33.174889-03:00","logger_name":"org.hibernate.SQL","message":"\n    create table item_pedido (\n        preco_unitario numeric(38,2),\n        quantidade integer not null,\n        subtotal numeric(38,2),\n        id bigint generated by default as identity,\n        pedido_id bigint,\n        produto_id bigint,\n        primary key (id)\n    )"}
{"@timestamp":"2025-08-10T22:08:33.175811-03:00","logger_name":"org.hibernate.SQL","message":"\n    create table pedido (\n        subtotal numeric(38,2),\n        taxa_entrega numeric(38,2),\n        valor_total numeric(38,2),\n        cliente_id bigint,\n        data_criacao timestamp(6),\n        data_pedido timestamp(6),\n        id bigint generated by default as identity,\n        restaurante_id bigint,\n        endereco_entrega varchar(255),\n        observacoes varchar(255),\n        status varchar(255) check (status in ('PENDENTE','CONFIRMADO','EM_PREPARACAO','SAIU_PARA_ENTREGA','ENTREGUE','CANCELADO')),\n        primary key (id)\n    )"}
{"@timestamp":"2025-08-10T22:08:33.177512-03:00","logger_name":"org.hibernate.SQL","message":"\n    create table produto (\n        disponivel boolean not null,\n        estoque integer not null,\n        preco numeric(38,2) not null,\n        id bigint generated by default as identity,\n        restaurante_id bigint,\n        categoria varchar(255),\n        descricao varchar(255),\n        nome varchar(255),\n        primary key (id)\n    )"}
{"@timestamp":"2025-08-10T22:08:33.178293-03:00","logger_name":"org.hibernate.SQL","message":"\n    create table restaurante (\n        ativo boolean,\n        avaliacao numeric(38,2),\n        taxa_entrega numeric(38,2) not null,\n        data_criacao timestamp(6),\n        id bigint generated by default as identity,\n        usuario_id bigint,\n        categoria varchar(255),\n        endereco varchar(255),\n        nome varchar(255),\n        telefone varchar(255),\n        primary key (id)\n    )"}
{"@timestamp":"2025-08-10T22:08:33.179494-03:00","logger_name":"org.hibernate.SQL","message":"\n    create table usuarios (\n        ativo boolean not null,\n        data_criacao timestamp(6) not null,\n        id bigint generated by default as identity,\n        restaurante_id bigint,\n        email varchar(255) not null unique,\n        nome varchar(255) not null,\n        role varchar(255) not null check (role in ('CLIENTE','RESTAURANTE','ENTREGADOR','ADMIN')),\n        senha varchar(255) not null,\n        primary key (id)\n    )"}
{"@timestamp":"2025-08-10T22:08:33.18106-03:00","logger_name":"org.hibernate.SQL","message":"\n    alter table if exists cliente \n       add constraint FK3rx8shpw8t7s3nid40ykcsekc \n       foreign key (usuario_id) \n       references usuarios"}
{"@timestamp":"2025-08-10T22:08:33.182465-03:00","logger_name":"org.hibernate.SQL","message":"\n    alter table if exists item_pedido \n       add constraint FK60ym08cfoysa17wrn1swyiuda \n       foreign key (pedido_id) \n       references pedido"}
{"@timestamp":"2025-08-10T22:08:33.183423-03:00","logger_name":"org.hibernate.SQL","message":"\n    alter table if exists item_pedido \n       add constraint FKtk55mn6d6bvl5h0no5uagi3sf \n       foreign key (produto_id) \n       references produto"}
{"@timestamp":"2025-08-10T22:08:33.184481-03:00","logger_name":"org.hibernate.SQL","message":"\n    alter table if exists pedido \n       add constraint FK30s8j2ktpay6of18lbyqn3632 \n       foreign key (cliente_id) \n       references cliente"}
{"@timestamp":"2025-08-10T22:08:33.185509-03:00","logger_name":"org.hibernate.SQL","message":"\n    alter table if exists pedido \n       add constraint FK3eud5cqmgsnltyk704hu3qj71 \n       foreign key (restaurante_id) \n       references restaurante"}
{"@timestamp":"2025-08-10T22:08:33.187267-03:00","logger_name":"org.hibernate.SQL","message":"\n    alter table if exists produto \n       add constraint FKb9jhjyghjcn25guim7q4pt8qx \n       foreign key (restaurante_id) \n       references restaurante"}
{"@timestamp":"2025-08-10T22:08:33.188515-03:00","logger_name":"org.hibernate.SQL","message":"\n    alter table if exists restaurante \n       add constraint FKlki9ww8l6wau6yf4kc3wlvu8x \n       foreign key (usuario_id) \n       references usuarios"}
{"@timestamp":"2025-08-10T22:08:33.192469-03:00","logger_name":"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean","message":"Initialized JPA EntityManagerFactory for persistence unit 'default'"}
{"@timestamp":"2025-08-10T22:08:33.431662-03:00","logger_name":"com.deliverytech.delivery.security.JwtAuthenticationFilter","message":"Filter 'jwtAuthenticationFilter' configured for use"}
{"@timestamp":"2025-08-10T22:08:33.432701-03:00","logger_name":"org.springframework.web.filter.ServerHttpObservationFilter","message":"Filter 'webMvcObservationFilter' configured for use"}
{"@timestamp":"2025-08-10T22:08:33.494279-03:00","logger_name":"org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer","message":"Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService"}
{"@timestamp":"2025-08-10T22:08:33.504666-03:00","logger_name":"com.deliverytech.delivery.service.impl.UsuarioServiceImpl","message":"[N/A] Gauge 'usuarios_ativos' registrado com sucesso."}
{"@timestamp":"2025-08-10T22:08:33.615795-03:00","logger_name":"org.springframework.data.jpa.repository.query.QueryEnhancerFactory","message":"Hibernate is in classpath; If applicable, HQL parser will be used."}
{"@timestamp":"2025-08-10T22:08:34.777819-03:00","logger_name":"io.micrometer.core.instrument.MeterRegistry","message":"This Gauge has been already registered (MeterId{name='usuarios.ativos', tags=[]}), the registration will be ignored. Note that subsequent logs will be logged at debug level."}
{"@timestamp":"2025-08-10T22:08:34.936809-03:00","logger_name":"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping","message":"50 mappings in 'requestMappingHandlerMapping'"}
{"@timestamp":"2025-08-10T22:08:34.969677-03:00","logger_name":"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping","message":"Patterns [/webjars/**, /**, /swagger-ui*/*swagger-initializer.js, /swagger-ui*/**] in 'resourceHandlerMapping'"}
{"@timestamp":"2025-08-10T22:08:35.064238-03:00","logger_name":"org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver","message":"Exposing 14 endpoints beneath base path '/actuator'"}
{"@timestamp":"2025-08-10T22:08:35.214199-03:00","logger_name":"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter","message":"ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice"}
{"@timestamp":"2025-08-10T22:08:35.248875-03:00","logger_name":"org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver","message":"ControllerAdvice beans: 2 @ExceptionHandler, 1 ResponseBodyAdvice"}
{"@timestamp":"2025-08-10T22:08:35.424242-03:00","logger_name":"org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration","message":"H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:deliverydb'"}
{"@timestamp":"2025-08-10T22:08:35.507254-03:00","logger_name":"org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer","message":"LiveReload server is running on port 35729"}
{"@timestamp":"2025-08-10T22:08:35.553228-03:00","logger_name":"org.apache.coyote.http11.Http11NioProtocol","message":"Starting ProtocolHandler [\"http-nio-8080\"]"}
{"@timestamp":"2025-08-10T22:08:35.560354-03:00","logger_name":"org.springframework.boot.web.embedded.tomcat.TomcatWebServer","message":"Tomcat started on port 8080 (http) with context path '/'"}
{"@timestamp":"2025-08-10T22:08:35.579912-03:00","logger_name":"com.deliverytech.delivery.DeliveryApiApplication","message":"Started DeliveryApiApplication in 5.814 seconds (process running for 6.207)"}
{"@timestamp":"2025-08-10T22:08:46.45041-03:00","logger_name":"org.springframework.boot.web.embedded.tomcat.GracefulShutdown","message":"Commencing graceful shutdown. Waiting for active requests to complete"}
{"@timestamp":"2025-08-10T22:08:48.463737-03:00","logger_name":"org.springframework.boot.web.embedded.tomcat.GracefulShutdown","message":"Graceful shutdown complete"}
{"@timestamp":"2025-08-10T22:08:48.480477-03:00","logger_name":"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean","message":"Closing JPA EntityManagerFactory for persistence unit 'default'"}
{"@timestamp":"2025-08-10T22:08:48.480872-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists cliente cascade "}
{"@timestamp":"2025-08-10T22:08:48.481844-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists item_pedido cascade "}
{"@timestamp":"2025-08-10T22:08:48.482149-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists pedido cascade "}
{"@timestamp":"2025-08-10T22:08:48.482415-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists produto cascade "}
{"@timestamp":"2025-08-10T22:08:48.482651-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists restaurante cascade "}
{"@timestamp":"2025-08-10T22:08:48.482902-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists usuarios cascade "}
{"@timestamp":"2025-08-10T22:08:48.485741-03:00","logger_name":"org.springframework.beans.factory.support.DisposableBeanAdapter","message":"Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add \";DB_CLOSE_ON_EXIT=FALSE\" to the db URL) [90121-232]"}
{"@timestamp":"2025-08-10T22:08:48.486071-03:00","logger_name":"com.zaxxer.hikari.HikariDataSource","message":"HikariPool-1 - Shutdown initiated..."}
{"@timestamp":"2025-08-10T22:08:48.487049-03:00","logger_name":"com.zaxxer.hikari.HikariDataSource","message":"HikariPool-1 - Shutdown completed."}
{"@timestamp":"2025-08-10T22:17:31.401627-03:00","logger_name":"com.deliverytech.delivery.cache.CachePerformanceTest","message":"Starting CachePerformanceTest using Java 21.0.7 with PID 18397 (started by robson in /Users/robson/Documents/delivery-api-robson/delivery-api)"}
{"@timestamp":"2025-08-10T22:17:31.409354-03:00","logger_name":"com.deliverytech.delivery.cache.CachePerformanceTest","message":"Running with Spring Boot v3.5.4, Spring v6.2.9"}
{"@timestamp":"2025-08-10T22:17:31.409801-03:00","logger_name":"com.deliverytech.delivery.cache.CachePerformanceTest","message":"The following 1 profile is active: \"test\""}
{"@timestamp":"2025-08-10T22:17:31.432569-03:00","logger_name":"org.springframework.web.context.support.GenericWebApplicationContext","message":"Refreshing org.springframework.web.context.support.GenericWebApplicationContext@44dcc0e4"}
{"@timestamp":"2025-08-10T22:17:34.90024-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists cliente cascade "}
{"@timestamp":"2025-08-10T22:17:34.903523-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists item_pedido cascade "}
{"@timestamp":"2025-08-10T22:17:34.904456-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists pedido cascade "}
{"@timestamp":"2025-08-10T22:17:34.905231-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists produto cascade "}
{"@timestamp":"2025-08-10T22:17:34.905812-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists restaurante cascade "}
{"@timestamp":"2025-08-10T22:17:34.906492-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists usuarios cascade "}
{"@timestamp":"2025-08-10T22:17:34.911678-03:00","logger_name":"org.hibernate.SQL","message":"\n    create table cliente (\n        ativo boolean not null,\n        data_criacao timestamp(6),\n        id bigint generated by default as identity,\n        usuario_id bigint,\n        email varchar(255),\n        endereco varchar(255),\n        nome varchar(255),\n        telefone varchar(255),\n        primary key (id)\n    )"}
{"@timestamp":"2025-08-10T22:17:34.912976-03:00","logger_name":"org.hibernate.SQL","message":"\n    create table item_pedido (\n        preco_unitario numeric(38,2),\n        quantidade integer not null,\n        subtotal numeric(38,2),\n        id bigint generated by default as identity,\n        pedido_id bigint,\n        produto_id bigint,\n        primary key (id)\n    )"}
{"@timestamp":"2025-08-10T22:17:34.914211-03:00","logger_name":"org.hibernate.SQL","message":"\n    create table pedido (\n        subtotal numeric(38,2),\n        taxa_entrega numeric(38,2),\n        valor_total numeric(38,2),\n        cliente_id bigint,\n        data_criacao timestamp(6),\n        data_pedido timestamp(6),\n        id bigint generated by default as identity,\n        restaurante_id bigint,\n        endereco_entrega varchar(255),\n        observacoes varchar(255),\n        status varchar(255) check (status in ('PENDENTE','CONFIRMADO','EM_PREPARACAO','SAIU_PARA_ENTREGA','ENTREGUE','CANCELADO')),\n        primary key (id)\n    )"}
{"@timestamp":"2025-08-10T22:17:34.916761-03:00","logger_name":"org.hibernate.SQL","message":"\n    create table produto (\n        disponivel boolean not null,\n        estoque integer not null,\n        preco numeric(38,2) not null,\n        id bigint generated by default as identity,\n        restaurante_id bigint,\n        categoria varchar(255),\n        descricao varchar(255),\n        nome varchar(255),\n        primary key (id)\n    )"}
{"@timestamp":"2025-08-10T22:17:34.917891-03:00","logger_name":"org.hibernate.SQL","message":"\n    create table restaurante (\n        ativo boolean,\n        avaliacao numeric(38,2),\n        taxa_entrega numeric(38,2) not null,\n        data_criacao timestamp(6),\n        id bigint generated by default as identity,\n        usuario_id bigint,\n        categoria varchar(255),\n        endereco varchar(255),\n        nome varchar(255),\n        telefone varchar(255),\n        primary key (id)\n    )"}
{"@timestamp":"2025-08-10T22:17:34.919449-03:00","logger_name":"org.hibernate.SQL","message":"\n    create table usuarios (\n        ativo boolean not null,\n        data_criacao timestamp(6) not null,\n        id bigint generated by default as identity,\n        restaurante_id bigint,\n        email varchar(255) not null unique,\n        nome varchar(255) not null,\n        role varchar(255) not null check (role in ('CLIENTE','RESTAURANTE','ENTREGADOR','ADMIN')),\n        senha varchar(255) not null,\n        primary key (id)\n    )"}
{"@timestamp":"2025-08-10T22:17:34.921019-03:00","logger_name":"org.hibernate.SQL","message":"\n    alter table if exists cliente \n       add constraint FK3rx8shpw8t7s3nid40ykcsekc \n       foreign key (usuario_id) \n       references usuarios"}
{"@timestamp":"2025-08-10T22:17:34.922401-03:00","logger_name":"org.hibernate.SQL","message":"\n    alter table if exists item_pedido \n       add constraint FK60ym08cfoysa17wrn1swyiuda \n       foreign key (pedido_id) \n       references pedido"}
{"@timestamp":"2025-08-10T22:17:34.923618-03:00","logger_name":"org.hibernate.SQL","message":"\n    alter table if exists item_pedido \n       add constraint FKtk55mn6d6bvl5h0no5uagi3sf \n       foreign key (produto_id) \n       references produto"}
{"@timestamp":"2025-08-10T22:17:34.924825-03:00","logger_name":"org.hibernate.SQL","message":"\n    alter table if exists pedido \n       add constraint FK30s8j2ktpay6of18lbyqn3632 \n       foreign key (cliente_id) \n       references cliente"}
{"@timestamp":"2025-08-10T22:17:34.926166-03:00","logger_name":"org.hibernate.SQL","message":"\n    alter table if exists pedido \n       add constraint FK3eud5cqmgsnltyk704hu3qj71 \n       foreign key (restaurante_id) \n       references restaurante"}
{"@timestamp":"2025-08-10T22:17:34.927408-03:00","logger_name":"org.hibernate.SQL","message":"\n    alter table if exists produto \n       add constraint FKb9jhjyghjcn25guim7q4pt8qx \n       foreign key (restaurante_id) \n       references restaurante"}
{"@timestamp":"2025-08-10T22:17:34.928582-03:00","logger_name":"org.hibernate.SQL","message":"\n    alter table if exists restaurante \n       add constraint FKlki9ww8l6wau6yf4kc3wlvu8x \n       foreign key (usuario_id) \n       references usuarios"}
{"@timestamp":"2025-08-10T22:17:35.355885-03:00","logger_name":"com.deliverytech.delivery.service.impl.UsuarioServiceImpl","message":"[N/A] Gauge 'usuarios_ativos' registrado com sucesso."}
{"@timestamp":"2025-08-10T22:17:38.012707-03:00","logger_name":"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping","message":"50 mappings in 'requestMappingHandlerMapping'"}
{"@timestamp":"2025-08-10T22:17:38.123613-03:00","logger_name":"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping","message":"Patterns [/webjars/**, /**, /swagger-ui*/*swagger-initializer.js, /swagger-ui*/**] in 'resourceHandlerMapping'"}
{"@timestamp":"2025-08-10T22:17:38.641579-03:00","logger_name":"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter","message":"ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice"}
{"@timestamp":"2025-08-10T22:17:38.730784-03:00","logger_name":"org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver","message":"ControllerAdvice beans: 2 @ExceptionHandler, 1 ResponseBodyAdvice"}
{"@timestamp":"2025-08-10T22:17:39.205921-03:00","logger_name":"com.deliverytech.delivery.cache.CachePerformanceTest","message":"Started CachePerformanceTest in 8.402 seconds (process running for 9.325)"}
{"@timestamp":"2025-08-10T22:17:42.934633-03:00","logger_name":"com.deliverytech.delivery.service.impl.PedidoServiceImpl","message":"[N/A] Pedido criado: id=500, clienteId=1, restauranteId=10"}
{"@timestamp":"2025-08-10T22:17:42.997833-03:00","logger_name":"com.deliverytech.delivery.service.impl.ClienteServiceImpl","message":"[N/A] Cliente cadastrado com sucesso: id=1, email=robson@email.com"}
{"@timestamp":"2025-08-10T22:17:43.010121-03:00","logger_name":"com.deliverytech.delivery.service.impl.ClienteServiceImpl","message":"[N/A] BusinessException ao cadastrar cliente: Cliente com email já cadastrado"}
{"@timestamp":"2025-08-10T22:17:43.016359-03:00","logger_name":"com.deliverytech.delivery.service.impl.ClienteServiceImpl","message":"[N/A] Cliente não encontrado por ID: 1"}
{"@timestamp":"2025-08-10T22:17:43.020397-03:00","logger_name":"com.deliverytech.delivery.service.impl.ClienteServiceImpl","message":"[N/A] Cliente encontrado por ID: 1"}
{"@timestamp":"2025-08-10T22:17:43.047008-03:00","logger_name":"org.springframework.web.context.support.GenericWebApplicationContext","message":"Closing org.springframework.web.context.support.GenericWebApplicationContext@44dcc0e4, started on Sun Aug 10 22:17:31 BRT 2025"}
{"@timestamp":"2025-08-10T22:17:43.529262-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists cliente cascade "}
{"@timestamp":"2025-08-10T22:17:43.531565-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists item_pedido cascade "}
{"@timestamp":"2025-08-10T22:17:43.533503-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists pedido cascade "}
{"@timestamp":"2025-08-10T22:17:43.535223-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists produto cascade "}
{"@timestamp":"2025-08-10T22:17:43.53662-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists restaurante cascade "}
{"@timestamp":"2025-08-10T22:17:43.538293-03:00","logger_name":"org.hibernate.SQL","message":"\n    drop table if exists usuarios cascade "}

version: '3.8' # Versão do Docker Compose usada

networks:
  default:
    driver: bridge # Rede bridge padrão para comunicação interna entre os serviços

services:
  # Serviço principal da API Delivery (Spring Boot)
  delivery-api:
    build: . # Constrói a imagem Docker com base no Dockerfile na raiz do projeto
    ports:
      - "8080:8080" # Mapeia a porta 8080 do container para a porta 8080 da máquina host
    environment:
      - SPRING_PROFILES_ACTIVE=default # Profile ativo do Spring Boot (configuração da aplicação)

      # Configurações para OpenTelemetry Java Agent - para rastreamento distribuído (tracing)
      - JAVA_TOOL_OPTIONS=-javaagent:/otel/opentelemetry-javaagent.jar # Ativa o agente OTEL para a JVM
      - OTEL_SERVICE_NAME=delivery-api # Nome do serviço para aparecer no Jaeger
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318 # Endpoint para enviar traces para Jaeger via OTLP
      - OTEL_METRICS_EXPORTER=none # Desativa exportação de métricas pelo OTEL (foco só em tracing)
      - OTEL_LOGS_EXPORTER=none # Desativa exportação de logs pelo OTEL
      - OTEL_TRACES_EXPORTER=otlp # Formato de exportação de tracing (OTLP)

      # Configurações de sampling (amostragem) para limitar a quantidade de traces coletados
      - OTEL_TRACES_SAMPLER=parentbased_traceidratio  # Usa sampler baseado no trace pai e taxa probabilística
      - OTEL_TRACES_SAMPLER_ARG=0.1                     # Amostra 10% das requisições para tracing

      # Configuração do Redis para cache (hostname e porta do container Redis)
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379

    volumes:
      # Monta o agente OpenTelemetry no caminho /otel dentro do container
      - ./opentelemetry-javaagent.jar:/otel/opentelemetry-javaagent.jar
    restart: unless-stopped # Reinicia automaticamente, a menos que o container seja parado manualmente
    depends_on:
      - jaeger  # Garante que o Jaeger esteja rodando antes da aplicação
      - redis   # Garante que o Redis esteja rodando antes da aplicação

  # Serviço Prometheus para coleta de métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090" # Porta da interface web do Prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml # Arquivo de configuração do Prometheus
      - ./prometheus_rules/:/etc/prometheus/prometheus_rules/ # Regras de alertas
      - prometheus_data:/prometheus # Volume para persistência dos dados do Prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml' # Indica o arquivo de configuração a ser usado
      - '--storage.tsdb.path=/prometheus' # Diretório onde os dados são armazenados

  # Serviço Grafana para visualização de métricas e dashboards
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000" # Porta da interface web do Grafana
    volumes:
      - grafana-data:/var/lib/grafana # Volume para armazenar dados persistentes do Grafana (dashboards, configurações)

  # Serviço Jaeger para visualização de tracing (traces distribuídos)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    restart: unless-stopped
    ports:
      - "16686:16686" # UI web do Jaeger
      - "4317:4317"   # Endpoint OTLP gRPC para receber traces
      - "4318:4318"   # Endpoint OTLP HTTP para receber traces
      - "9411:9411"   # Endpoint compatível com Zipkin para receber traces
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411 # Habilita suporte ao protocolo Zipkin na porta 9411

  # Serviço Redis para cache distribuído
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379" # Porta padrão do Redis exposta para acesso local
    volumes:
      - redis-data:/data # Volume para persistência dos dados do Redis (opcional)
    command: ["redis-server", "--appendonly", "yes"] # Ativa o modo Append Only File para persistência no Redis

  # Serviço Redis Insight (ferramenta UI para monitorar Redis)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: redis-insight
    ports:
      - "5540:5540" # Porta da interface web do Redis Insight

# Volumes persistentes para garantir que dados sobrevivam a reinícios dos containers
volumes:
  grafana-data:
  prometheus_data:
  redis-data:
